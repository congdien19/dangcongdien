import React, { useState } from 'react';
import { FaTiktok } from 'react-icons/fa';
import './DvTiktok.css';

const DvTiktok = () => {
  const [link, setLink] = useState('');
  const [selectedServer, setSelectedServer] = useState('MC-1');
  const [quantity, setQuantity] = useState(100);
  const [pricePerView, setPricePerView] = useState(0.004);
  const [note, setNote] = useState('');
  const [multiOrder, setMultiOrder] = useState(false);
  const [schedule, setSchedule] = useState(false);
  const [autoRepeat, setAutoRepeat] = useState(false);

  const serverOptions = [
    {
      id: 'MC-1',
      name: 'MC-1',
      price: 0.004,
      description: 'TƒÉng L∆∞·ª£t Theo D√µi TikTok ~ L√™n Nhanh ~ Gi√° Si√™u R·∫ª ~ T√†i Nguy√™n Vi·ªát Nam üî•üî• - 0.004ƒë/1 view',
      badge: 'green'
    },
    {
      id: 'MC-2',
      name: 'MC-2',
      price: 0.01,
      description: 'TƒÉng L∆∞·ª£t Tym Tiktok ~ L√™n Nhanh ~ T√†i Nguy√™n Vi·ªát Nam üî• - 0.01ƒë/1 view',
      badge: 'green'
    },
    {
      id: 'MC-3',
      name: 'MC-3',
      price: 0.017,
      description: 'TƒÉng L∆∞·ª£t M·∫Øt Live Tiktok ~ T·ªâ L·ªá T·ª•t Th·∫•p ~ T√†i Nguy√™n Vi·ªát Nam üî• - 0.017ƒë/1 view',
      badge: 'green'
    },
    {
      id: 'MC-4',
      name: 'MC-4',
      price: 4.089,
      description: 'TƒÉng L∆∞·ª£t B√¨nh Lu·∫≠n Tiktok ~ Xu H∆∞·ªõng ~ L∆∞·ª£t TƒÉng Nhanh ~ T√†i Nguy√™n Vi·ªát Nam üî•üî•üî• - 4.089ƒë/1 view',
      badge: 'red'
    },
    {
      id: 'MC-5',
      name: 'MC-5',
      price: 2.5,
      description: 'TƒÉng L∆∞·ª£t Xem Video B·∫Øt ƒê·∫ßu Nhanh ~ T√†i Nguy√™n Vi·ªát Nam - 2.5ƒë/1 view',
      badge: 'blue'
    }
  ];

  const total = quantity * pricePerView;

  const handleServerChange = (server) => {
    setSelectedServer(server.id);
    setPricePerView(server.price);
  };

  return (
    <div className="dvtiktok-container">
      {/* Header */}
      <div className="dvtiktok-header">
        <div className="breadcrumb">
          <span className="tiktok-icon"><FaTiktok /></span>
          TIKTOK &gt;&gt; TƒÇNG L∆Ø·ª¢T XEM VIDEO
        </div>
        <div className="header-actions">
          <button className="btn-create-order">KH·ªûI T·∫†O ƒê∆†N H√ÄNG</button>
          <button className="btn-history">üîç L·ªäCH S·ª¨ ƒê∆†N H√ÄNG</button>
        </div>
      </div>

      <div className="dvtiktok-main-content">
        {/* Left Column - Form */}
        <div className="dvtiktok-form-column">
          <div className="form-section">
            <div className="form-group">
              <label>Nh·∫≠p Link Video:</label>
              <input 
                type="text" 
                value={link} 
                onChange={e => setLink(e.target.value)} 
                placeholder="Nh·∫≠p Link Video c·∫ßn mua" 
                className="form-input"
              />
            </div>

            <div className="checkbox-wrapper">
              <input 
                type="checkbox" 
                id="multi-order"
                checked={multiOrder}
                onChange={e => setMultiOrder(e.target.checked)}
              />
              <label htmlFor="multi-order">Mua Nhi·ªÅu ƒê∆°n C√πng L√∫c ~ Ch·ªçn Tr∆∞·ªõc Khi Nh·∫≠p Danh S√°ch Link</label>
            </div>

            <div className="server-section">
              <h4>Ch·ªçn m√°y ch·ªß:</h4>
              {serverOptions.map((server) => (
                <div key={server.id} className="server-option">
                  <label className="server-label">
                    <input 
                      type="radio" 
                      name="server" 
                      checked={selectedServer === server.id} 
                      onChange={() => handleServerChange(server)}
                    />
                    <span className={`server-badge ${server.badge}`}>{server.name}</span>
                    <span className="server-description">{server.description}</span>
                  </label>
                </div>
              ))}
            </div>

            <div className="form-row">
              <div className="form-group">
                <label>S·ªë l∆∞·ª£ng: (100 ~ 1000000)</label>
                <input 
                  type="number" 
                  value={quantity} 
                  onChange={e => setQuantity(Number(e.target.value))}
                  className="form-input"
                  min="100"
                  max="1000000"
                />
              </div>
              <div className="form-group">
                <label>S·ªë ti·ªÅn m·ªói t∆∞∆°ng t√°c:</label>
                <input 
                  type="number" 
                  value={pricePerView} 
                  className="form-input"
                  readOnly
                  step="0.001"
                />
              </div>
            </div>

            <div className="form-group">
              <label>Ghi ch√∫:</label>
              <textarea 
                value={note} 
                onChange={e => setNote(e.target.value)} 
                placeholder="Ghi ch√∫ n·∫øu c·∫ßn"
                className="form-textarea"
              />
            </div>

            <div className="checkbox-wrapper">
              <input 
                type="checkbox" 
                id="schedule"
                checked={schedule}
                onChange={e => setSchedule(e.target.checked)}
              />
              <label htmlFor="schedule">
                ƒê·∫∑t l·ªãch ch·∫°y M√∫i gi·ªù: +07:00 ~ Ki·ªÉm tra qu√° tr√¨nh ·ªü m·ª•c ti·∫øn tr√¨nh ƒë∆°n h√†ng
              </label>
            </div>

            <div className="checkbox-wrapper">
              <input 
                type="checkbox" 
                id="auto-repeat"
                checked={autoRepeat}
                onChange={e => setAutoRepeat(e.target.checked)}
              />
              <label htmlFor="auto-repeat">
                ƒê·∫∑t h√†ng l·∫∑p l·∫°i. T·ª± ƒë·ªông ƒë·∫∑t l·∫°i ƒë∆°n h√†ng sau khi ƒë∆°n h√†ng n√†y HO√ÄN TH√ÄNH
              </label>
            </div>

            <div className="total-section">
              <div className="total-info">
                <p>T·ªïng thanh to√°n: <span className="total-amount">{total.toLocaleString()} ƒë</span></p>
                <p>B·∫°n s·∫Ω tƒÉng <strong>{quantity.toLocaleString()}</strong> s·ªë l∆∞·ª£ng v·ªõi gi√° <strong>{total.toLocaleString()} ƒë</strong></p>
              </div>
              <button className="btn-create-order-main">T·∫°o ƒë∆°n h√†ng</button>
            </div>
          </div>
        </div>

        {/* Right Column - Info Cards */}
        <div className="dvtiktok-info-column">
          <div className="info-card blue-card">
            <h4>H∆∞·ªõng D·∫´n & Ghi Ch√∫:</h4>
            <ul>
              <li>C√°c m√°y ch·ªß thu·ªôc d·ªãch v·ª• vi·ªát nam ƒë·ªÅu s·ª≠ d·ª•ng ngu·ªìn t√†i kho·∫£n vi·ªát nam</li>
              <li>N·∫øu m√°y ch·ªß kh√¥ng ƒë·∫∑t ƒë∆∞·ª£c vui l√≤ng nh·∫•p chat h·ªó tr·ª£</li>
              <li>Th·ªùi gian b·∫Øt ƒë·∫ßu: 0-30 ph√∫t</li>
              <li>T·ªëc ƒë·ªô: 1000-5000/ng√†y</li>
              <li>D·ªãch v·ª• ch·∫°y 24/7 kh√¥ng ngh·ªâ</li>
            </ul>
          </div>

          <div className="info-card red-card">
            <h4>L∆ØU √ù!</h4>
            <ul>
              <li>1 ID kh√¥ng mua 2 ƒë∆°n c√πng l√∫c trong h·ªá th·ªëng !</li>
              <li>Nghi√™m c·∫•m buff c√°c n·ªôi dung vi ph·∫°m ph√°p lu·∫≠t, ch√≠nh tr·ªã, ƒë·ªìi tr·ª•y...</li>
              <li>N·∫øu c√≥ t√¨nh tr·∫°ng h·ªá th·ªëng b√™n kh√¥ng ch·∫°y, n·∫øu c√≥ t√¨nh tr·∫°ng h·ª•t, th√¨ s·ªë l∆∞·ª£ng gi·ªØa 2 b√™n s·∫Ω kh√¥ng ƒë∆∞·ª£c x·ª≠ l√≠.</li>
              <li>Ch√∫ng t√¥i s·∫Ω kh√¥ng th·ªÉ ho√†n ti·ªÅn n·∫øu sai link ho·∫∑c sai ID.</li>
              <li>Vui l√≤ng ki·ªÉm tra k·ªπ link tr∆∞·ªõc khi ƒë·∫∑t ƒë∆°n</li>
              <li>ƒê·∫£m b·∫£o video kh√¥ng ·ªü ch·∫ø ƒë·ªô ri√™ng t∆∞</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DvTiktok;
